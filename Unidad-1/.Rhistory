/*Test the Law Of Large Numbers for N random normally distributed numbers with mean = 0, stdev=1:
Create an R script that will count how many of these numbers fall between -1 and 1 and divide
by the total quantity of N
You know that E(X) = 68.2%
Check that Mean(Xn)->E(X) as you rerun your script while increasing N
Hint:
1. Initialize sample size
2. Initialize counter
3. loop for(i in rnorm(size))
4. Check if the iterated variable falls
5. Increase counter if the condition is true
6. return a result <- counter / N  */
sample(1:50,10,replace=F)
mean(x)
x= sample(1:50,10,replace= F)
mean(x)
mean(0)=q
mean(0)=z
mean(0)=x
z=mean(0)
mystats <- function(x){
m <- mean(x)
md <- median(x)
n <- length(x)
s <- sd(x)
skew <- sum((x-m)^3/n/s^3)
kurt <- sum((x-m)^4/n/s^4) - 3
return(c(n=n, mean=m, median=md, stdev=s, skew=skew, kurtosis=kurt))
}
sapply(melocactus[,"alturatotal"], mystats)
mystats <- function(x){
m <- mean(x)
md <- median(x)
n <- length(x)
s <- sd(x)
skew <- sum((x-m)^3/n/s^3)
kurt <- sum((x-m)^4/n/s^4) - 3
return(c(n=n, mean=0, median=md, stdev=1, skew=skew, kurtosis=kurt))
}
sapply(melocactus[,"alturatotal"], mystats)
mystats <- function(x){
m <- mean(x)
md <- median(x)
n <- length(x)
s <- sd(x)
skew <- sum((x-m)^3/n/s^3)
kurt <- sum((x-m)^4/n/s^4) - 3
return(c(n=n, mean=m, median=md, stdev=s, skew=skew, kurtosis=kurt))
}
x
